# ===================================================================
# Production Nginx Configuration for AI Content Summarizer Frontend
# This configuration is optimized for production with:
# - Maximum security hardening
# - Aggressive performance optimization
# - Comprehensive monitoring and logging
# - Rate limiting to prevent abuse
# - Advanced caching strategies
# ===================================================================

# Define rate limiting zones - this is like having bouncers at different entrances
# Each zone has different rules based on what we're protecting
limit_req_zone $binary_remote_addr zone=api:10m rate=10r/m;       # API calls: 10 per minute per IP
limit_req_zone $binary_remote_addr zone=general:10m rate=60r/m;   # General requests: 60 per minute per IP
limit_req_zone $binary_remote_addr zone=static:10m rate=200r/m;   # Static files: 200 per minute per IP

# Upstream definition for backend API with load balancing and health checks
upstream backend_api {
    # Multiple server entries would go here for load balancing in a multi-instance setup
    server backend:5088 max_fails=3 fail_timeout=30s;
    
    # Connection pooling for better performance
    keepalive 32;                    # Keep 32 connections alive
    keepalive_requests 100;          # Process 100 requests per connection
    keepalive_timeout 60s;           # Keep connections alive for 60 seconds
}

# Main server block - this is our production web server
server {
    listen 80;
    server_name _;                   # Accept requests for any hostname
    root /usr/share/nginx/html;
    index index.html;

    # ===================================================================
    # SECURITY HEADERS - Critical for production web applications
    # These headers protect against common web vulnerabilities
    # ===================================================================
    
    # Prevent the browser from MIME-sniffing a response away from the declared content-type
    add_header X-Content-Type-Options "nosniff" always;
    
    # Enable the Cross-site scripting (XSS) filter built into modern browsers
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Prevent the site from being embedded in frames (clickjacking protection)
    add_header X-Frame-Options "SAMEORIGIN" always;
    
    # Control how much referrer information should be included with requests
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Content Security Policy - defines which resources the browser is allowed to load
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' http://backend:5088;" always;
    
    # Strict Transport Security - forces HTTPS (commented out since we're using HTTP)
    # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Hide nginx version for security through obscurity
    server_tokens off;

    # ===================================================================
    # LOGGING CONFIGURATION - Production logging strategy
    # We log less than development but focus on actionable information
    # ===================================================================
    
    # Error log: Only log warnings and errors to reduce noise
    error_log /var/log/nginx/error.log warn;
    
    # Access log: Buffered and compressed for performance
    access_log /var/log/nginx/access.log combined buffer=16k flush=5s;

    # ===================================================================
    # PERFORMANCE OPTIMIZATION - Gzip compression
    # Compress responses to reduce bandwidth and improve load times
    # ===================================================================
    
    gzip on;
    gzip_vary on;                    # Add Vary: Accept-Encoding header
    gzip_min_length 1024;            # Only compress files larger than 1KB
    gzip_comp_level 6;               # Compression level (1-9, 6 is good balance)
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        font/woff
        font/woff2;

    # ===================================================================
    # STATIC ASSET CACHING - Aggressive caching for performance
    # Static assets rarely change, so we can cache them aggressively
    # ===================================================================
    
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Apply rate limiting for static files
        limit_req zone=static burst=20 nodelay;
        
        # Cache static assets for 1 year - they have hashed names in Vite builds
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Security headers for static files
        add_header X-Content-Type-Options "nosniff" always;
        
        # Try to serve the file, return 404 if not found
        try_files $uri =404;
        
        # Access log: We typically don't need to log static file requests in production
        access_log off;
    }

    # ===================================================================
    # API PROXY CONFIGURATION - Secure proxy to backend services
    # This is the heart of our reverse proxy setup
    # ===================================================================
    
    # Main API endpoint with comprehensive rate limiting
    location /api/ {
        # Rate limiting: 10 requests per minute per IP for API calls
        limit_req zone=api burst=5 nodelay;
        
        # Add security and debugging headers
        add_header X-Proxy-Pass "backend-api" always;
        add_header X-Response-Time $upstream_response_time always;
        
        # Proxy configuration for optimal performance and reliability
        proxy_pass http://backend_api/api/;
        proxy_http_version 1.1;
        
        # Headers to maintain client information
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Connection management for better performance
        proxy_set_header Connection "";
        
        # Production timeouts - longer for AI processing but reasonable for user experience
        proxy_connect_timeout 30s;      # Time to establish connection to backend
        proxy_send_timeout 30s;         # Time to send request to backend
        proxy_read_timeout 90s;         # Time to read response (longer for AI processing)
        
        # Buffer settings optimized for AI API responses
        proxy_buffering on;
        proxy_buffer_size 128k;         # Buffer for response headers
        proxy_buffers 4 256k;           # Buffers for response body
        proxy_busy_buffers_size 256k;   # Buffers for client while reading from upstream
        proxy_temp_file_write_size 256k;# Size for temporary files
        
        # Hide internal headers from clients
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
        
        # Handle upstream connection errors gracefully
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 60s;
    }

    # Special handling for the summarization endpoint with enhanced rate limiting
    location /api/summarization/summarize {
        # Stricter rate limiting for the resource-intensive summarization endpoint
        limit_req zone=api burst=3 nodelay;
        
        # Add specific monitoring headers for this critical endpoint
        add_header X-API-Endpoint "summarization" always;
        add_header X-Rate-Limited "summarization-endpoint" always;
        
        # Same proxy configuration as main API but with monitoring
        proxy_pass http://backend_api/api/summarization/summarize;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";
        
        # Longer timeouts for AI processing
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 120s;        # Extra time for AI processing
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        proxy_temp_file_write_size 256k;
        
        # Security headers
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
    }

    # ===================================================================
    # HEALTH CHECK ENDPOINTS - Monitoring and observability
    # ===================================================================
    
    # Frontend health check - lightweight and fast
    location /health {
        access_log off;                 # Don't log health checks
        return 200 "production-frontend-healthy\n";
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header X-Health-Check "frontend" always;
    }

    # Backend health check proxy - for monitoring the full stack
    location /backend-health {
        access_log off;
        proxy_pass http://backend_api/api/summarization/health;
        proxy_set_header Host $host;
        proxy_timeout 5s;              # Quick timeout for health checks
        add_header X-Health-Check "backend-proxy" always;
    }

    # ===================================================================
    # REACT APP SERVING - Single Page Application support
    # ===================================================================
    
    # Main React application with client-side routing support
    location / {
        # Apply general rate limiting
        limit_req zone=general burst=10 nodelay;
        
        # Try to serve the requested file, fall back to index.html for client-side routing
        try_files $uri $uri/ /index.html;
        
        # Cache control for the main HTML file
        location = /index.html {
            # Never cache the main HTML file - it contains references to hashed assets
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
            
            # Security headers for the main application page
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
        }
    }

    # ===================================================================
    # SECURITY HARDENING - Block malicious requests
    # ===================================================================
    
    # Block access to hidden files and directories (security)
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }

    # Block access to backup files (security)
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }

    # Block access to common exploit paths
    location ~* \.(env|git|svn|htaccess|htpasswd)$ {
        deny all;
        access_log off;
        log_not_found off;
        return 404;
    }

    # ===================================================================
    # ERROR HANDLING - User-friendly error pages
    # ===================================================================
    
    # Custom error pages for better user experience
    error_page 404 /index.html;        # Let React handle 404s (client-side routing)
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;                       # Only accessible through error_page directive
        add_header Cache-Control "no-cache" always;
    }

    # Rate limiting error page
    error_page 429 /429.html;
    location = /429.html {
        root /usr/share/nginx/html;
        internal;
        add_header Cache-Control "no-cache" always;
        add_header Retry-After 60 always;
    }
}