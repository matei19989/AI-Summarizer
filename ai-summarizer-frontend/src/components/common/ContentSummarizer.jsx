import React, { useState } from 'react';

// Import all the modular components you created
import AppHeader from './AppHeader';
import InputSection from './InputSection';
import OutputSection from './OutputSection';
import PrimaryButton from './PrimaryButton';

// Import utilities from the utils folder
import { ValidationUtils } from '../utils/ValidationUtils';

// Main Container Component - This orchestrates all the smaller components
const ContentSummarizer = () => {
  // State management - centralized in the main component
  const [inputMode, setInputMode] = useState('text');
  const [inputContent, setInputContent] = useState('');
  const [outputContent, setOutputContent] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [hasAudio, setHasAudio] = useState(false);

  // Event handlers - business logic separated from UI components
  const handleModeChange = (mode) => {
    setInputMode(mode);
    setInputContent('');
    setError('');
  };

  const handleInputChange = (content) => {
    setInputContent(content);
    if (error) setError(''); // Clear error when user starts typing
  };

  const handleSummarize = async () => {
    // Validate input using our utility function
    const validationError = ValidationUtils.validateInput(inputContent, inputMode);
    if (validationError) {
      setError(validationError);
      return;
    }
    
    setIsLoading(true);
    setError('');
    
    try {
      // Simulate API processing - replace with actual API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock response - replace with actual API response
      const mockSummary = `This is a sample summary of your ${inputMode === 'url' ? 'URL' : 'text'} content. In a real implementation, this would be generated by your C# backend using the Hugging Face API.`;
      setOutputContent(mockSummary);
      setHasAudio(true); // Enable audio playback after successful summarization
      
    } catch (err) {
      setError('Failed to generate summary. Please try again.');
      setHasAudio(false);
    } finally {
      setIsLoading(false);
    }
  };

  const handlePlayAudio = () => {
    // Placeholder for audio playback functionality
    console.log('Playing audio summary...');
    // This will integrate with your Text-to-Speech API
    alert('Audio playback will be implemented when TTS integration is ready!');
  };

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4" style={{ fontFamily: 'Times New Roman, serif' }}>
      <div className="w-full max-w-6xl bg-white rounded-lg shadow-lg p-8">
        {/* Using the AppHeader component */}
        <AppHeader />

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Using the InputSection component */}
          <InputSection
            inputMode={inputMode}
            inputContent={inputContent}
            onInputChange={handleInputChange}
            onModeChange={handleModeChange}
            error={error}
            isLoading={isLoading}
          />

          {/* Using the OutputSection component */}
          <OutputSection
            outputContent={outputContent}
            hasAudio={hasAudio}
            onPlayAudio={handlePlayAudio}
          />
        </div>

        {/* Using the PrimaryButton component for the main action */}
        <div className="flex justify-center mt-8">
          <PrimaryButton
            onClick={handleSummarize}
            loading={isLoading}
            variant="primary"
          >
            Summarize Content
          </PrimaryButton>
        </div>
      </div>
    </div>
  );
};

export default ContentSummarizer;