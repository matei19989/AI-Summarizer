name: Dependabot Auto-Merge

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: dependabot-merge-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  dependabot-auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Wait for CI checks
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.issue.number;
            
            console.log('Waiting for CI checks to complete...');
            
            // Wait for up to 10 minutes for checks to complete
            const maxWaitTime = 10 * 60 * 1000; // 10 minutes in milliseconds
            const startTime = Date.now();
            
            while (Date.now() - startTime < maxWaitTime) {
              const { data: checks } = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: context.payload.pull_request.head.sha
              });
              
              const relevantChecks = checks.check_runs.filter(check => 
                check.name.includes('CI') || 
                check.name.includes('test') ||
                check.name.includes('build') ||
                check.name.includes('quality')
              );
              
              if (relevantChecks.length === 0) {
                console.log('No CI checks found, proceeding...');
                break;
              }
              
              const completed = relevantChecks.every(check => check.status === 'completed');
              
              if (completed) {
                const successful = relevantChecks.every(check => check.conclusion === 'success');
                if (successful) {
                  console.log('All CI checks passed!');
                  break;
                } else {
                  console.log('Some CI checks failed, not auto-merging');
                  process.exit(1);
                }
              }
              
              console.log('Waiting for CI checks to complete...');
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30 seconds
            }

      - name: Auto-approve and merge based on update type
        run: |
          UPDATE_TYPE="${{ steps.metadata.outputs.update-type }}"
          PACKAGE_NAME="${{ steps.metadata.outputs.dependency-names }}"
          PREVIOUS_VERSION="${{ steps.metadata.outputs.previous-version }}"
          NEW_VERSION="${{ steps.metadata.outputs.new-version }}"
          
          echo "🔍 Dependabot Update Details:"
          echo "- Package: $PACKAGE_NAME"
          echo "- Update Type: $UPDATE_TYPE"
          echo "- Previous Version: $PREVIOUS_VERSION"
          echo "- New Version: $NEW_VERSION"
          
          case "$UPDATE_TYPE" in
            "version-update:semver-patch")
              echo "✅ Patch update detected - auto-approving and merging"
              
              # Auto-approve
              gh pr review --approve "$PR_URL"
              
              # Auto-merge with squash
              gh pr merge --auto --squash "$PR_URL"
              
              # Add labels
              gh pr edit "$PR_URL" --add-label "patch-update,auto-merged,dependencies"
              
              # Comment on the PR
              gh pr comment "$PR_URL" --body "🤖 **Auto-merged patch update**
              
              This patch update has been automatically approved and merged after CI checks passed.
              
              **Update Details:**
              - Package: \`$PACKAGE_NAME\`
              - Version: \`$PREVIOUS_VERSION\` → \`$NEW_VERSION\`
              - Type: Patch update (likely bug fixes)
              
              *This is considered a low-risk update and is safe to auto-merge.*"
              ;;
              
            "version-update:semver-minor")
              echo "⚠️ Minor update detected - auto-approving but requiring manual merge"
              
              # Auto-approve
              gh pr review --approve "$PR_URL"
              
              # Add labels
              gh pr edit "$PR_URL" --add-label "minor-update,auto-approved,dependencies"
              
              # Comment on the PR
              gh pr comment "$PR_URL" --body "🤖 **Auto-approved minor update**
              
              This minor update has been automatically approved after CI checks passed.
              
              **Update Details:**
              - Package: \`$PACKAGE_NAME\`
              - Version: \`$PREVIOUS_VERSION\` → \`$NEW_VERSION\`
              - Type: Minor update (new features, backward compatible)
              
              **⚠️ Manual merge required** - Please review the changelog and merge when ready."
              ;;
              
            "version-update:semver-major")
              echo "🚨 Major update detected - requires manual review"
              
              # Add labels
              gh pr edit "$PR_URL" --add-label "major-update,needs-review,dependencies,high-priority"
              
              # Comment on the PR
              gh pr comment "$PR_URL" --body "🚨 **Major version update detected!**
              
              This update includes breaking changes and requires careful manual review.
              
              **Update Details:**
              - Package: \`$PACKAGE_NAME\`
              - Version: \`$PREVIOUS_VERSION\` → \`$NEW_VERSION\`
              - Type: Major update (breaking changes possible)
              
              **⚠️ Action Required:**
              1. Review the package changelog for breaking changes
              2. Test the application thoroughly
              3. Update any affected code
              4. Verify all tests pass
              5. Manually approve and merge when ready
              
              **Resources:**
              - [View Changelog](https://github.com/search?q=repo%3A$PACKAGE_NAME+$NEW_VERSION+is%3Aissue+is%3Aclosed)
              - [Package Documentation](https://www.npmjs.com/package/$PACKAGE_NAME)
              
              *This PR will not be auto-merged due to the risk of breaking changes.*"
              ;;
              
            *)
              echo "❓ Unknown update type: $UPDATE_TYPE"
              
              # Add labels
              gh pr edit "$PR_URL" --add-label "unknown-update,needs-review,dependencies"
              
              # Comment on the PR
              gh pr comment "$PR_URL" --body "❓ **Unknown update type detected**
              
              This update type is not recognized by the auto-merge workflow.
              
              **Update Details:**
              - Package: \`$PACKAGE_NAME\`
              - Version: \`$PREVIOUS_VERSION\` → \`$NEW_VERSION\`
              - Type: $UPDATE_TYPE
              
              Please review and merge manually if appropriate."
              ;;
          esac
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update security-related dependencies immediately
        if: contains(steps.metadata.outputs.dependency-names, 'security') || contains(steps.metadata.outputs.dependency-names, 'vulnerability')
        run: |
          echo "🔒 Security update detected - prioritizing merge"
          
          # Auto-approve regardless of version type
          gh pr review --approve "$PR_URL"
          
          # Auto-merge with squash for security updates
          gh pr merge --auto --squash "$PR_URL"
          
          # Add security labels
          gh pr edit "$PR_URL" --add-label "security-update,auto-merged,high-priority"
          
          # Comment on the PR
          gh pr comment "$PR_URL" --body "🔒 **Security update auto-merged**
          
          This security-related update has been automatically merged to ensure the application remains secure.
          
          **Update Details:**
          - Package: \`${{ steps.metadata.outputs.dependency-names }}\`
          - Version: \`${{ steps.metadata.outputs.previous-version }}\` → \`${{ steps.metadata.outputs.new-version }}\`
          - Type: ${{ steps.metadata.outputs.update-type }}
          
          *Security updates are automatically prioritized and merged after CI validation.*"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## 🤖 Dependabot Auto-Merge Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Update Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: ${{ steps.metadata.outputs.dependency-names }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Update Type**: ${{ steps.metadata.outputs.update-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: ${{ steps.metadata.outputs.previous-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version**: ${{ steps.metadata.outputs.new-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PR Number**: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Actions Taken" >> $GITHUB_STEP_SUMMARY
          
          UPDATE_TYPE="${{ steps.metadata.outputs.update-type }}"
          case "$UPDATE_TYPE" in
            "version-update:semver-patch")
              echo "- ✅ **Auto-approved and merged** (patch update)" >> $GITHUB_STEP_SUMMARY
              ;;
            "version-update:semver-minor")
              echo "- ✅ **Auto-approved** (minor update, manual merge required)" >> $GITHUB_STEP_SUMMARY
              ;;
            "version-update:semver-major")
              echo "- ⚠️ **Manual review required** (major update)" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "- ❓ **Unknown update type** (manual review required)" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "- 🏷️ **Labels applied** based on update type" >> $GITHUB_STEP_SUMMARY
          echo "- 💬 **Comment added** with update details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY