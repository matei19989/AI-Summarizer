name: Frontend CI

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'ai-summarizer-frontend/**'
      - '!ai-summarizer-frontend/Dockerfile'
      - '!ai-summarizer-frontend/.dockerignore'
      - '!ai-summarizer-frontend/nginx*.conf'
      - '.github/workflows/frontend-ci.yml'
      - '.github/actions/setup-node/**'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'ai-summarizer-frontend/**'
      - '!ai-summarizer-frontend/Dockerfile'
      - '!ai-summarizer-frontend/.dockerignore'
      - '!ai-summarizer-frontend/nginx*.conf'
      - '.github/workflows/frontend-ci.yml'
      - '.github/actions/setup-node/**'

concurrency:
  group: frontend-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  WORKING_DIRECTORY: ./ai-summarizer-frontend

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['18', '20']
    outputs:
      build-artifact: ${{ steps.build.outputs.build-artifact }}
      test-results: ${{ steps.test.outputs.test-results }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        node-version: ${{ matrix.node-version }}
        working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Run ESLint
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        echo "🔍 Running ESLint..."
        if npm run lint 2>/dev/null; then
          echo "✅ ESLint passed"
        else
          echo "⚠️ ESLint issues found - please fix them"
          npm run lint || true
        fi

    - name: Run tests
      id: test
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        echo "🧪 Running tests..."
        
        if npm run | grep -q "test"; then
          npm test -- --coverage --watchAll=false --passWithNoTests --maxWorkers=2
          echo "test-results=success" >> $GITHUB_OUTPUT
          echo "✅ Tests completed successfully"
        else
          echo "⚠️ No test script found - consider adding tests"
          echo "test-results=no-tests" >> $GITHUB_OUTPUT
        fi

    - name: Build application
      id: build
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        echo "🏗️ Building application..."
        npm run build
        
        # Calculate build size
        BUILD_SIZE=$(du -sh dist/ | cut -f1)
        echo "📦 Build size: $BUILD_SIZE"
        
        echo "build-artifact=dist/" >> $GITHUB_OUTPUT
        echo "✅ Build completed successfully"

    - name: Upload build artifacts
      if: matrix.node-version == env.NODE_VERSION
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ github.sha }}
        path: ${{ env.WORKING_DIRECTORY }}/dist/
        retention-days: 7

  docker-test:
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.build-artifact != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test Docker image
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        echo "🐳 Building Docker image for testing..."
        
        # Build the test image using the test target
        docker build -t ai-summarizer-frontend:ci-${{ github.sha }} \
          --target test \
          .
        
        echo "✅ Docker image built successfully"

    - name: Test Docker container
      run: |
        echo "🧪 Testing Docker container..."
        
        # Start container
        docker run -d --name test-frontend -p 3000:80 \
          ai-summarizer-frontend:ci-${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        if curl -f http://localhost:3000/health; then
          echo "✅ Container health check passed!"
        else
          echo "❌ Container health check failed!"
          docker logs test-frontend
          exit 1
        fi
        
        # Test static content
        if curl -f http://localhost:3000/; then
          echo "✅ Static content served successfully!"
        else
          echo "❌ Static content test failed!"
          docker logs test-frontend
          exit 1
        fi
        
        # Clean up
        docker stop test-frontend
        docker rm test-frontend

  lighthouse:
    runs-on: ubuntu-latest
    needs: [code-quality, docker-test]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies and build
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        npm ci
        npm run build

    - name: Serve static files
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        # Install and start a simple HTTP server
        npm install -g serve
        serve -s dist -l 4000 &
        sleep 5

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v11
      with:
        urls: |
          http://localhost:4000
        uploadArtifacts: true
        temporaryPublicStorage: true

  security-check:
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js Environment
      uses: ./.github/actions/setup-node
      with:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    - name: Run npm audit
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        echo "🔒 Running npm security audit..."
        
        # Run audit and capture results
        npm audit --json > npm-audit-report.json || true
        
        # Check for critical/high vulnerabilities
        if [ -f npm-audit-report.json ]; then
          CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' npm-audit-report.json)
          HIGH=$(jq '.metadata.vulnerabilities.high // 0' npm-audit-report.json)
          
          echo "🔍 Security scan results:"
          echo "- Critical: $CRITICAL"
          echo "- High: $HIGH"
          
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "⚠️ High-severity vulnerabilities found:"
            npm audit --audit-level=high
          else
            echo "✅ No high-severity vulnerabilities found"
          fi
        fi

  build-summary:
    runs-on: ubuntu-latest
    needs: [code-quality, docker-test, lighthouse, security-check]
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## 🎨 Frontend CI Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Test**: ${{ needs.docker-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Lighthouse**: ${{ needs.lighthouse.result || 'Skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Check**: ${{ needs.security-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Results**: ${{ needs.code-quality.outputs.test-results }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
