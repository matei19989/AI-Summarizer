# ===================================================================
# Docker Image Build and Push Workflow - Azure Optimized
# This workflow builds and pushes your backend container to GitHub Container Registry
# Azure Web App for Containers will pull from this registry automatically
# ===================================================================

name: Build and Push Backend for Azure

on:
  # Trigger on pushes to main branch (production releases)
  push:
    branches: [ main ]
    # Only trigger if backend code changes
    paths:
      - 'AISummarizerAPI/**'
      - '.github/workflows/docker-build.yml'
  
  # Allow manual workflow execution for testing
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even without code changes'
        type: boolean
        default: false

# Environment variables used across all jobs
env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: aisummarizer-backend

# Required permissions for pushing to GitHub Container Registry
permissions:
  contents: read
  packages: write

jobs:
  # Build and push backend Docker image for Azure
  build-and-push-backend:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Set up Docker Buildx for advanced build features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Log in to GitHub Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Generate image name (convert to lowercase for Docker compatibility)
      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            # Tag with 'latest' for main branch (Azure will use this)
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag with commit SHA for unique identification
            type=sha,prefix=sha-
            # Tag with timestamp for easy identification
            type=schedule,pattern={{date 'YYYYMMDD-HHmmss'}}
      
      # Build and push backend Docker image
      - name: Build and push backend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./AISummarizerAPI
          file: ./AISummarizerAPI/Dockerfile
          platforms: linux/amd64  # Azure Web Apps typically use amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Enable build caching for faster subsequent builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build arguments for optimization
          build-args: |
            BUILDKIT_INLINE_CACHE=1
      
      # Output image information for verification
      - name: Output image details
        run: |
          echo "üê≥ Backend image built and pushed successfully!"
          echo "üì¶ Image: ${{ steps.meta.outputs.tags }}"
          echo "üîç Digest: ${{ steps.build.outputs.digest }}"
          echo "üåê This image is now ready for Azure Web App deployment"

  # Test the built image (optional but recommended)
  test-container:
    runs-on: ubuntu-latest
    needs: build-and-push-backend
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Test container startup
        run: |
          echo "üß™ Testing container startup..."
          # Pull the image we just built
          docker pull ${{ needs.build-and-push-backend.outputs.image-tag }}
          
          # Run container in background
          docker run -d --name test-container -p 8080:80 \
            -e HuggingFace__ApiToken=${{ secrets.HUGGINGFACE_API_TOKEN }} \
            ${{ needs.build-and-push-backend.outputs.image-tag }}
          
          # Wait for container to start
          sleep 30
          
          # Test health endpoint
          if curl -f http://localhost:8080/api/summarization/health; then
            echo "‚úÖ Container health check passed!"
          else
            echo "‚ùå Container health check failed!"
            docker logs test-container
            exit 1
          fi
          
          # Clean up
          docker stop test-container
          docker rm test-container