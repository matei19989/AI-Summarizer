# ===================================================================
# Docker Image Build and Push Workflow
# Builds Docker images for both frontend and backend
# Pushes to GitHub Container Registry (GHCR) for secure, free hosting
# ===================================================================

name: Build and Push Docker Images

on:
  # Trigger on pushes to main branch (production releases)
  push:
    branches: [ main ]
    # Only trigger if there are actual changes to the application code
    paths:
      - 'AISummarizerAPI/**'
      - 'ai-summarizer-frontend/**'
      - 'docker-compose*.yml'
      - '.github/workflows/docker-build.yml'
  
  # Trigger on pull requests to main (for testing images)
  pull_request:
    branches: [ main ]
    paths:
      - 'AISummarizerAPI/**'
      - 'ai-summarizer-frontend/**'
      - 'docker-compose*.yml'
  
  # Allow manual workflow execution for testing
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        type: boolean
        default: false

# Environment variables used across all jobs
env:
  REGISTRY: ghcr.io

# Default permissions for security (principle of least privilege)
permissions:
  contents: read
  packages: write
  security-events: write  # For security scanning results

jobs:
  # Job 1: Build and test backend Docker image
  build-backend:
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.image.outputs.image-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Set up Docker Buildx for advanced build features
      # Enables multi-platform builds and build caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Use default builder with buildkit
          driver-opts: image=moby/buildkit:buildx-stable-1
      
      # Log in to GitHub Container Registry
      # Only on main branch pushes or manual triggers with push enabled
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.push_images == 'true'))
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Convert repository name to lowercase for Docker compatibility
      - name: Generate image name
        id: image
        run: |
          IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "image-name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "Generated image name: ${IMAGE_NAME}"
      
      # Extract metadata for Docker tags and labels
      # Fixed tagging to avoid invalid tag formats
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image.outputs.image-name }}/backend
          tags: |
            # Tag with branch name for branches
            type=ref,event=branch
            # Tag with version for releases
            type=ref,event=tag
            # Tag with PR number for pull requests  
            type=ref,event=pr
            # Tag with commit SHA for unique identification
            type=sha,prefix=sha-
            # Always tag latest for main branch
            type=raw,value=latest,enable={{is_default_branch}}
      
      # Build and optionally push backend Docker image
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./AISummarizerAPI
          file: ./AISummarizerAPI/Dockerfile
          platforms: linux/amd64,linux/arm64  # Multi-platform support
          # Only push on main branch or manual trigger with push enabled
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.push_images == 'true')) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Enable build caching for faster builds
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Build arguments for better build context
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Job 2: Build and test frontend Docker image
  build-frontend:
    runs-on: ubuntu-latest
    outputs:
      image-name: ${{ steps.image.outputs.image-name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.push_images == 'true'))
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Convert repository name to lowercase for Docker compatibility
      - name: Generate image name
        id: image
        run: |
          IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "image-name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "Generated image name: ${IMAGE_NAME}"
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image.outputs.image-name }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./ai-summarizer-frontend
          file: ./ai-summarizer-frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.push_images == 'true')) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # Job 3: Test the complete application stack
  test-docker-compose:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Test that our docker-compose configuration works
      - name: Test Docker Compose stack
        run: |
          # Build images locally for testing
          docker compose -f docker-compose.dev.yml build
          
          # Start the stack
          docker compose -f docker-compose.dev.yml up -d
          
          # Wait for services to be healthy
          timeout 300 bash -c 'until docker compose -f docker-compose.dev.yml ps | grep -E "(healthy|running)"; do sleep 10; done'
          
          # Test backend health endpoint
          curl -f http://localhost:5088/api/summarization/health || exit 1
          
          # Test frontend accessibility
          curl -f http://localhost:3000/health || exit 1
          
          # Test API integration
          curl -X POST http://localhost:5088/api/summarization/summarize \
            -H "Content-Type: application/json" \
            -d '{"Content": "This is a test content for summarization testing in our CI/CD pipeline. It needs to be long enough to pass validation.", "ContentType": "text"}' \
            | grep -q "summary" || exit 1
      
      # Clean up test environment
      - name: Clean up
        if: always()
        run: |
          docker compose -f docker-compose.dev.yml down -v
          docker system prune -af

  # Job 4: Security scanning of built images
  security-scan:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name != 'pull_request'
    continue-on-error: true
    strategy:
      matrix:
        image: [backend, frontend]
    
    steps:
      - name: Generate image name
        id: image
        run: |
          IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "image-name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "Scanning image: ${{ env.REGISTRY }}/${IMAGE_NAME}/${{ matrix.image }}:latest"
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ steps.image.outputs.image-name }}/${{ matrix.image }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'