name: Build and Deploy Containers

on:
  push:
    branches:
      - main
    paths:
      - 'AISummarizerAPI/**'
      - 'ai-summarizer-frontend/**'
      - '.github/workflows/docker-build.yml'
      - 'docker-compose*.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'AISummarizerAPI/**'
      - 'ai-summarizer-frontend/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment to Azure'
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: aisummarizer-backend
  FRONTEND_IMAGE: aisummarizer-frontend

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  changed-files:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check changed paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'AISummarizerAPI/**'
              - '.github/workflows/docker-build.yml'
            frontend:
              - 'ai-summarizer-frontend/**'
              - '.github/workflows/docker-build.yml'

  build-backend:
    needs: changed-files
    if: needs.changed-files.outputs.backend == 'true' || github.event.inputs.force_deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=${{ github.ref_name }}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./AISummarizerAPI
          file: ./AISummarizerAPI/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: runtime
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
          sbom: true
          provenance: true

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE }}:latest
          format: 'sarif'
          output: 'backend-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'backend-trivy-results.sarif'
          category: 'backend-container'

  build-frontend:
    needs: changed-files
    if: needs.changed-files.outputs.frontend == 'true' || github.event.inputs.force_deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=${{ github.ref_name }}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./ai-summarizer-frontend
          file: ./ai-summarizer-frontend/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: runtime
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE }}:latest
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'frontend-trivy-results.sarif'
          category: 'frontend-container'

  integration-test:
    needs: [build-backend, build-frontend]
    if: always() && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test environment
        run: |
          echo "HUGGINGFACE_API_TOKEN=test-token" > .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Generate .env.production for CI
        run: |
          echo "HUGGINGFACE_API_TOKEN=${{ secrets.HUGGINGFACE_API_TOKEN }}" > .env.production
          echo "HuggingFace__ApiToken=${{ secrets.HUGGINGFACE_API_TOKEN }}" >> .env.production
          echo "ASPNETCORE_ENVIRONMENT=Production" >> .env.production
          echo "ASPNETCORE_DETAILEDERRORS=false" >> .env.production
          echo "ASPNETCORE_URLS=http://+:80" >> .env.production
          echo "NGINX_ENV=production" >> .env.production
          echo "Logging__LogLevel__Default=Warning" >> .env.production

      - name: Test Docker Compose setup
        run: |
          docker compose -f docker-compose.yml -f docker-compose.prod.yml config

      - name: Run integration tests
        run: |
          export BACKEND_IMAGE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE }}:latest"
          export FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE }}:latest"
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          
          echo "‚è≥ Waiting for services to start..."
          timeout 120s bash -c 'until curl -f http://localhost:80/health; do sleep 5; done'
          
          echo "‚è≥ Testing backend health..."
          timeout 120s bash -c 'until curl -f http://localhost:80/api/summarization/health; do sleep 5; done'
          
          echo "‚úÖ Integration tests passed"
          docker compose -f docker-compose.yml -f docker-compose.prod.yml down -v

  test-container-startup:
    if: github.event_name != 'pull_request'
    needs: [build-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Test container startup
        run: |
          echo "üß™ Testing backend container startup..."
          
          # Pull the image we just built
          docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE }}:latest
          
          # Run container in background
          docker run -d --name test-container -p 8080:80 \
            -e HuggingFace__ApiToken="dummy-token-for-testing" \
            -e ASPNETCORE_ENVIRONMENT=Production \
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE }}:latest
          
          # Wait for container to start
          echo "‚è≥ Waiting for container to start..."
          sleep 30
          
          # Test health endpoint
          if curl -f http://localhost:8080/api/summarization/health; then
            echo "‚úÖ Backend container health check passed!"
          else
            echo "‚ùå Backend container health check failed!"
            echo "Container logs:"
            docker logs test-container
            exit 1
          fi
          
          # Test root endpoint
          if curl -f http://localhost:8080/; then
            echo "‚úÖ Backend root endpoint check passed!"
          else
            echo "‚ùå Backend root endpoint check failed!"
            docker logs test-container
            exit 1
          fi
          
          # Clean up
          docker stop test-container
          docker rm test-container
          
          echo "üéâ Container startup test completed successfully!"

  deploy-to-azure:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-backend, integration-test, test-container-startup]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to Azure Web App for Containers
        run: |
          echo "üöÄ Deploying to Azure Web App for Containers"
          echo "Backend Image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE }}:latest"
          
          # This is where you would typically use Azure CLI or REST API to deploy
          # For now, we'll use a webhook approach if available
          
      - name: Trigger Azure deployment webhook
        if: ${{ secrets.AZURE_WEBHOOK_URL != '' }}
        run: |
          curl -X POST "${{ secrets.AZURE_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "image": "${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE }}:latest",
              "registry": "${{ env.REGISTRY }}",
              "tag": "latest",
              "environment": "production"
            }'
          echo "‚úÖ Azure webhook triggered successfully"

      - name: Verify Azure deployment
        if: ${{ secrets.AZURE_WEBHOOK_URL != '' }}
        run: |
          echo "‚è≥ Waiting for Azure deployment to complete..."
          sleep 90
          
          # Test the deployed application
          for i in {1..10}; do
            if curl -f https://aisummarizer2026-bsech4f0cyh3akdw.northeurope-01.azurewebsites.net/api/summarization/health; then
              echo "‚úÖ Azure deployment verified successfully!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 30s..."
            sleep 30
          done
          
          echo "‚ùå Azure deployment verification failed after 10 attempts"
          echo "This may indicate a deployment issue that needs manual investigation"
          exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend Image**: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BACKEND_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend Image**: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.FRONTEND_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY