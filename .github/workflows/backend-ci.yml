name: Backend CI

permissions:
  contents: read
  security-events: write  # For security scanning

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'AISummarizerAPI/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths: 
      - 'AISummarizerAPI/**'
      - '.github/workflows/backend-ci.yml'

env:
  DOTNET_VERSION: '9.0.x'
  WORKING_DIRECTORY: ./AISummarizerAPI

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x', '9.0.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: dotnet restore

    - name: Build
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        if find . -name "*Tests.csproj" -o -name "*Test.csproj" | grep -q .; then
          dotnet test --no-build --configuration Release \
            --logger "trx;LogFileName=test-results.trx" \
            --logger "console;verbosity=detailed" \
            --collect:"XPlat Code Coverage" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            --results-directory ./TestResults
        else
          echo "::warning::No test projects found. Consider adding unit tests."
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.dotnet-version }}
        path: ${{ env.WORKING_DIRECTORY }}/TestResults/
        retention-days: 7

    - name: Publish application
      if: matrix.dotnet-version == env.DOTNET_VERSION
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        dotnet publish --no-build --configuration Release \
          --output ./publish \
          --runtime linux-x64 \
          --self-contained false

    - name: Upload publish artifacts
      if: matrix.dotnet-version == env.DOTNET_VERSION
      uses: actions/upload-artifact@v4
      with:
        name: backend-publish
        path: ${{ env.WORKING_DIRECTORY }}/publish/
        retention-days: 7

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './AISummarizerAPI'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for security vulnerabilities
      run: |
        if grep -q "HIGH\|CRITICAL" trivy-results.sarif; then
          echo "::error::Security vulnerabilities found!"
          exit 1
        fi

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Install dotnet tools
      run: |
        dotnet tool install --global dotnet-format
        dotnet tool install --global dotnet-reportgenerator-globaltool

    - name: Check code formatting
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: dotnet format --verify-no-changes --verbosity diagnostic

    - name: Run code analysis
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        dotnet build --configuration Release \
          /p:EnableNETAnalyzers=true \
          /p:AnalysisLevel=latest \
          /p:TreatWarningsAsErrors=true

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./AISummarizerAPI
        file: ./AISummarizerAPI/Dockerfile
        push: false
        tags: ai-summarizer-backend:ci-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Run container structure tests
      run: |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd):/workspace \
          gcr.io/gcp-runtimes/container-structure-test:latest \
          test --image ai-summarizer-backend:ci-${{ github.sha }} \
          --config /workspace/.github/container-tests/backend-tests.yaml \
          || echo "::warning::Container structure tests not configured"

  deploy-to-azure:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    environment: production
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-publish
        path: ./publish

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: AISummarizer2026
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: './publish'

    - name: Verify deployment
      run: |
        sleep 30  # Give Azure time to deploy
        response=$(curl -s -o /dev/null -w "%{http_code}" https://aisummarizer2026-bsech4f0cyh3akdw.northeurope-01.azurewebsites.net/api/summarization/health)
        if [ $response -eq 200 ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment verification failed with status: $response"
          exit 1
        fi